diff --git a/src/api/types.ts b/src/api/types.ts
index bc96c30..87a5c1e 100644
--- a/src/api/types.ts
+++ b/src/api/types.ts
@@ -41,7 +41,6 @@ export interface ReqData {
   parameters: Params;
 }
 
-//login
 
 export interface UserData {
   token: string;
diff --git a/src/app/create-profile/page.tsx b/src/app/create-profile/page.tsx
index 798d347..69cc4c5 100644
--- a/src/app/create-profile/page.tsx
+++ b/src/app/create-profile/page.tsx
@@ -8,9 +8,7 @@ const CreateProfile = () => {
         <h2 className="text-2xl font-bold mb-6 text-gray-800 text-center">
           Registration
         </h2>
-
         <RegistrationContainer />
-
         <p className="text-center text-gray-600 text-sm mt-4">
           Do have an account?{" "}
           <Link href="/login" className="text-blue-500 hover:text-blue-700">
diff --git a/src/app/job-details/[id]/page.tsx b/src/app/job-details/[id]/page.tsx
index 9f69a63..20bc841 100644
--- a/src/app/job-details/[id]/page.tsx
+++ b/src/app/job-details/[id]/page.tsx
@@ -3,8 +3,9 @@ import LikeButtonContainer from "@/components/likeButton/LikeButtonContainer";
 import Image from "next/image";
 import React from "react";
 
-const JobDetails = async ({ params }: any) => {
+const JobDetails = async ({ params }: { params: { id: string } }) => {
   const res = await getJobById(params.id);
+
   return (
     <div className="bg-white shadow-lg rounded-lg p-6 space-y-4 border border-gray-200 mx-auto w-4/5 mt-20 m-10">
       <div className="flex justify-between items-center">
diff --git a/src/app/layout.tsx b/src/app/layout.tsx
index 60b452d..e560320 100644
--- a/src/app/layout.tsx
+++ b/src/app/layout.tsx
@@ -8,8 +8,8 @@ import Link from "next/link";
 
 const inter = Inter({ subsets: ["latin"] });
 export const metadata: Metadata = {
-  title: "Create Next App",
-  description: "Generated by create next app",
+  title: "Job Search",
+  description: "Job search service",
 };
 
 export default function RootLayout({
diff --git a/src/app/login/page.tsx b/src/app/login/page.tsx
index 82de3fc..72a5bb5 100644
--- a/src/app/login/page.tsx
+++ b/src/app/login/page.tsx
@@ -13,7 +13,10 @@ const Login = () => {
 
         <p className="text-center text-gray-600 text-sm mt-4">
           Don`t have an account?{" "}
-          <Link href="/registration" className="text-blue-500 hover:text-blue-700">
+          <Link
+            href="/registration"
+            className="text-blue-500 hover:text-blue-700"
+          >
             Registration
           </Link>
         </p>
diff --git a/src/app/page.tsx b/src/app/page.tsx
index 6b9502f..c65923b 100644
--- a/src/app/page.tsx
+++ b/src/app/page.tsx
@@ -3,7 +3,7 @@ import JobSearchContainer from "@/components/jobsSearch/JobSearchContainer";
 export default function Home() {
   return (
     <main className="flex min-h-screen flex-col items-center p-24 gap-y-28">
-      some text
+      <JobSearchContainer />
     </main>
   );
 }
diff --git a/src/components/jobsSearch/JobSearchContainer.tsx b/src/components/jobsSearch/JobSearchContainer.tsx
index 7cddac3..f4dd297 100644
--- a/src/components/jobsSearch/JobSearchContainer.tsx
+++ b/src/components/jobsSearch/JobSearchContainer.tsx
@@ -14,7 +14,7 @@ const JobSearchContainer = () => {
 
   const [jobs, setJobs] = useState<JobItem[] | null>(null);
   const [isLoading, setIsLoading] = useState<boolean>(false);
-  const query = userDataState?.desiredJobTitle || null;
+  const query = userDataState?.desiredJobTitle || "";
 
   const { data } = useSWR(
     query ? `/search?query=${query}` : null,
@@ -41,7 +41,7 @@ const JobSearchContainer = () => {
       {userDataState?.desiredJobTitle || jobs ? (
         <Jobs jobs={jobs} isLoading={isLoading} />
       ) : (
-        <NoRecomendations isUserLogged={!!userDataState}/>
+        <NoRecomendations isUserLogged={!!userDataState} />
       )}
     </>
   );
diff --git a/src/components/jobsSearch/search/Search.tsx b/src/components/jobsSearch/search/Search.tsx
index 4562975..72ff713 100644
--- a/src/components/jobsSearch/search/Search.tsx
+++ b/src/components/jobsSearch/search/Search.tsx
@@ -9,11 +9,11 @@ interface SearchProps {
 const Search = ({ search }: SearchProps) => {
   const [query, setQuery] = useState("");
 
-  const handleInputChange = (e: any) => {
+  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
     setQuery(e.target.value);
   };
 
-  const handleSearch = (e: any) => {
+  const handleSearch = (e: React.FormEvent<HTMLFormElement>) => {
     e.preventDefault();
     search(query);
   };
diff --git a/src/components/likeButton/LikeButtonContainer.tsx b/src/components/likeButton/LikeButtonContainer.tsx
index 513475e..b76c2c7 100644
--- a/src/components/likeButton/LikeButtonContainer.tsx
+++ b/src/components/likeButton/LikeButtonContainer.tsx
@@ -20,6 +20,7 @@ const LikeButtonContainer = ({ jobInfo }: LikeButtonContainerProps) => {
     const jobsFromStorage = getLikedJobsFromStorage() || [];
     const isLiked = jobsFromStorage.some((el) => el.job_id == jobInfo.job_id);
     if (isLiked) setIsLiked(true);
+  // eslint-disable-next-line react-hooks/exhaustive-deps
   }, []);
 
   const setLike = () => {
diff --git a/src/components/likedJobs/LikedJobs.tsx b/src/components/likedJobs/LikedJobs.tsx
index 52e6f6f..0e5983b 100644
--- a/src/components/likedJobs/LikedJobs.tsx
+++ b/src/components/likedJobs/LikedJobs.tsx
@@ -1,11 +1,11 @@
 "use client";
 
-import { JobItem as JobItemI } from "@/api/types";
+import { JobItem as JobItemModel } from "@/api/types";
 import React from "react";
 import JobItem from "../../ui/jobItem/JobItem";
 
 interface LikedJobsProps {
-  jobs: JobItemI[] | null;
+  jobs: JobItemModel[] | null;
   action: (id: string) => void;
 }
 
diff --git a/src/components/login/LoginContainer.tsx b/src/components/login/LoginContainer.tsx
index a3cb690..29a4e13 100644
--- a/src/components/login/LoginContainer.tsx
+++ b/src/components/login/LoginContainer.tsx
@@ -9,16 +9,16 @@ import { setUserDataToStorage } from "@/lib/helpers/authHelper";
 
 const LoginContainer = () => {
   const router = useRouter();
-  const { userDataState, setUserDataState } = useAppContext();
+  const { setUserDataState } = useAppContext();
 
   const handleLogin = async (email: string, password: string) => {
     try {
       const data = await login(email, password);
       setUserDataToStorage(data);
-      setUserDataState && setUserDataState(data);
+      setUserDataState?.(data);
       router.push("/jobs");
     } catch (e) {
-      console.log("invalid login");
+      console.error("Invalid login");
     }
   };
 
diff --git a/src/components/profiile/ProfileContainer.tsx b/src/components/profiile/ProfileContainer.tsx
index 1be8788..e775e57 100644
--- a/src/components/profiile/ProfileContainer.tsx
+++ b/src/components/profiile/ProfileContainer.tsx
@@ -22,13 +22,14 @@ function ProfileContainer() {
       );
 
       const updatedUserData = { ...userData.user, token: userDataState!.token };
-      setUserDataState && setUserDataState(updatedUserData);
+      
+      setUserDataState?.(updatedUserData);
       setUserDataToStorage(updatedUserData);
       setError(null);
       setLoadingField(null);
-    } catch (err: any) {
-      setError("invalid field value ");
-      setLoadingField(null)
+    } catch (err) {
+      setError(`Invalid field value: ${fieldQuery}`);
+      setLoadingField(null);
     }
   };

diff --git a/src/components/registration/RegistrationContainer.tsx b/src/components/registration/RegistrationContainer.tsx
index 148d5f4..7930554 100644
--- a/src/components/registration/RegistrationContainer.tsx
+++ b/src/components/registration/RegistrationContainer.tsx
@@ -12,6 +12,7 @@ import { useAppContext } from "@/context";
 const RegistrationContainer = () => {
   const router = useRouter();
   const { setUserDataState } = useAppContext();
+
   const handleCreateProfile = async (
     name: string,
     email: string,
@@ -23,9 +24,10 @@ const RegistrationContainer = () => {
       setUserDataState && setUserDataState(data);
       router.push("/jobs");
     } catch (e) {
-      console.log("invalid data");
+      console.error("invalid data");
     }
   };
+
   return <Registaration createProfile={handleCreateProfile} />;
 };
 
diff --git a/src/context/context.ts b/src/context/context.ts
index 0b64484..f4b863b 100644
--- a/src/context/context.ts
+++ b/src/context/context.ts
@@ -1,12 +1,9 @@
-import { createContext } from 'react'
-import { STATE_PROPS } from './reducer';
-
-
+import { createContext } from "react";
+import { STATE_PROPS } from "./reducer";
 
 export const INITIAL_STATE = {
-    userDataState: undefined,
-    setUserDataState: undefined
-  }
-  
+  userDataState: undefined,
+  setUserDataState: undefined,
+};
 
-export const AppContext = createContext<STATE_PROPS>(INITIAL_STATE);
\ No newline at end of file
+export const AppContext = createContext<STATE_PROPS>(INITIAL_STATE);
diff --git a/src/context/index.tsx b/src/context/index.tsx
index fb1f42a..03cf0fd 100644
--- a/src/context/index.tsx
+++ b/src/context/index.tsx
@@ -1,7 +1,7 @@
 "use client";
 
 import { useContext, useReducer, useEffect } from "react";
-import { reducer } from "./reducer";
+import { reducer, ReducerActionTypes } from "./reducer";
 import { AppContext, INITIAL_STATE } from "./context";
 import { getUserDataFromStorage } from "@/lib/helpers/authHelper";
 import { UserData } from "@/lib/models";
@@ -11,7 +11,7 @@ export function AppWrapper({ children }: { children: React.ReactNode }) {
 
   const setUserDataState = (value?: UserData) => {
     dispatch({
-      type: "userDataState",
+      type: ReducerActionTypes.UpdateUserData,
       payload: {
         userDataState: value,
       },
@@ -26,6 +26,7 @@ export function AppWrapper({ children }: { children: React.ReactNode }) {
 
   useEffect(() => {
     fetchUserData();
+  // eslint-disable-next-line react-hooks/exhaustive-deps
   }, []);
 
   return (
diff --git a/src/context/reducer.ts b/src/context/reducer.ts
index e349b49..5c22368 100644
--- a/src/context/reducer.ts
+++ b/src/context/reducer.ts
@@ -5,17 +5,26 @@ export type STATE_PROPS = {
   setUserDataState?: ((value: UserData) => void);
 };
 
+export enum ReducerActionTypes {
+  UpdateUserData = "userDataState",
+  UpdateUserDataStateWithoutToken = "userDataStateWithoutToken"
+}
+
+export type UserDataPayload = {
+  userDataState?: UserData;
+}
+
 export const reducer = (
   state: STATE_PROPS,
-  action: { type: string; payload: any }
+  action: { type: string; payload: UserDataPayload }
 ) => {
   switch (action.type) {
-    case "userDataState":
+    case ReducerActionTypes.UpdateUserData:
       return {
         ...state,
         userDataState: action.payload.userDataState,
       };
-      case "userDataStateWithoutToken":
+      case ReducerActionTypes.UpdateUserDataStateWithoutToken:
         return {
             ...state,
             userDataState: action.payload.userDataState
diff --git a/src/lib/models.ts b/src/lib/models.ts
index 5d6472c..fb23ebe 100644
--- a/src/lib/models.ts
+++ b/src/lib/models.ts
@@ -1,4 +1,3 @@
-//src/lib/models.ts
 export interface UserData {
   token: string;
   name: string;
diff --git a/src/ui/inputField/InputField.tsx b/src/ui/inputField/InputField.tsx
index 259c983..42a4399 100644
--- a/src/ui/inputField/InputField.tsx
+++ b/src/ui/inputField/InputField.tsx
@@ -4,7 +4,7 @@ interface InputFieldProps {
   title: string;
   registerReq: UseFormRegisterReturn;
   type: string;
-  error: FieldError | undefined;
+  error?: FieldError;
 }
 
 const InputField = ({ title, registerReq, error, type }: InputFieldProps) => {
